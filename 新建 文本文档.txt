<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>拼图游戏</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: row;
            justify-content: center;
            gap: 40px;
            padding: 20px;
        }
        .panel {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #original-image {
            max-width: 400px;
            height: auto;
            border: 2px solid #333;
            margin: 10px;
            display: block;
        }
        #puzzle-container {
            width: 400px;
            height: 400px;
            border: 2px solid #333;
            position: relative;
            margin-top: 20px;
            overflow: visible;
            background: 
                linear-gradient(to right, #ccc 1px, transparent 1px),
                linear-gradient(to bottom, #ccc 1px, transparent 1px);
            background-size: calc(100%/3) calc(100%/3);
        }
        .puzzle-piece {
            position: absolute;
            cursor: move;
            user-select: none;
            transition: transform 0.3s ease;
            touch-action: none;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="panel">
        <h1>拼图游戏</h1>
        <button id="start-game">开始游戏</button>
        <div id="puzzle-container"></div>
    </div>
    
    <div id="completion-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); justify-content: center; align-items: center; flex-direction: column; color: white;">
        <h2 style="font-size: 3em; margin-bottom: 20px;">拼图完成！</h2>
        <button onclick="startGame(true); document.getElementById('completion-overlay').style.display = 'none'; document.getElementById('puzzle-container').style.background = ''" 
                style="padding: 15px 30px; font-size: 1.2em; background: #4CAF50; border: none; border-radius: 5px; color: white; cursor: pointer;">
            再玩一次
        </button>
    </div>
    <div class="panel">
        <h3>参考图</h3>
        <img id="original-image" src="picture.jpg" alt="拼图原图">
    </div>
    
    <script>
        document.getElementById('start-game').addEventListener('click', () => startGame());
        
        const PIECES = 9;
        let isFirstGame = true;
        let pieces = [];
        let correctPositions = [];
        
        function startGame(resetPositions = false) {
            const container = document.getElementById('puzzle-container');
            const img = document.getElementById('original-image');
            
            if(isFirstGame) {
                resetPositions = false;
                isFirstGame = false;
            }
            
            if(resetPositions) {
                container.innerHTML = '';
                pieces = [];
                correctPositions = [];
                return;
            }
            
            container.innerHTML = '';
            pieces = [];
            correctPositions = [];
            
            img.onload = null;  
            const gameImage = new Image();
            if(window.puzzleLoading) return;
            window.puzzleLoading = true;
            
            gameImage.src = img.src;
            
            gameImage.onload = function() {
                window.puzzleLoading = false;
                const containerWidth = container.offsetWidth;
                const containerHeight = container.offsetHeight;
                const pieceWidth = containerWidth / 3;
                const pieceHeight = containerHeight / 3;
                
                container.querySelectorAll('.puzzle-piece').forEach(piece => piece.remove());
                pieces = [];
                correctPositions = [];
                
                for (let row = 0; row < 3; row++) {
                    for (let col = 0; col < 3; col++) {
                        const canvas = document.createElement('canvas');
                        canvas.width = pieceWidth;
                        canvas.height = pieceHeight;
                        canvas.className = 'puzzle-piece';
                        
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(
                            img,
                            (img.naturalWidth/3)*col, (img.naturalHeight/3)*row, 
                            img.naturalWidth/3, img.naturalHeight/3,
                            0, 0, pieceWidth, pieceHeight
                        );
                        
                        const correctX = col * pieceWidth;
                        const correctY = row * pieceHeight;
                        correctPositions.push({x: correctX, y: correctY});
                        
                        canvas.style.left = `${Math.random()*600 - 100}px`;
                        canvas.style.top = `${Math.random()*600 - 100}px`;
                        
                        makeDraggable(canvas);
                        container.appendChild(canvas);
                        pieces.push({element: canvas, correctX, correctY});
                    }
                }
            };
        }

        function makeDraggable(element) {
            let isDragging = false;
            let startX, startY, translateX = 0, translateY = 0;
            const threshold = 30;
            
            element.addEventListener('touchstart', touchStart);
            element.addEventListener('touchmove', touchMove);
            element.addEventListener('touchend', touchEnd);
            element.addEventListener('mousedown', mouseDown);
            
            function getPosition(event) {
                return event.touches ? {
                    x: event.touches[0].clientX,
                    y: event.touches[0].clientY
                } : { x: event.clientX, y: event.clientY };
            }
            
            function mouseDown(e) {
                e.preventDefault();
                document.addEventListener('mousemove', mouseMove);
                document.addEventListener('mouseup', mouseUp);
                startDrag(getPosition(e));
            }
            
            function touchStart(e) {
                startDrag(getPosition(e));
            }
            
            function startDrag(pos) {
                isDragging = true;
                startX = pos.x - translateX;
                startY = pos.y - translateY;
                element.style.transition = 'transform 0.1s';
            }
            
            function mouseMove(e) {
                if (!isDragging) return;
                updatePosition(getPosition(e));
            }
            
            function touchMove(e) {
                if (!isDragging) return;
                updatePosition(getPosition(e));
                e.preventDefault();
            }
            
            function updatePosition(pos) {
                translateX = pos.x - startX;
                translateY = pos.y - startY;
                element.style.transform = `translate(${translateX}px, ${translateY}px)`;
            }
            
            function mouseUp() {
                endDrag();
                document.removeEventListener('mousemove', mouseMove);
                document.removeEventListener('mouseup', mouseUp);
            }
            
            function touchEnd() {
                endDrag();
            }
            
            function endDrag() {
                if (!isDragging) return;
                isDragging = false;
                element.style.transition = 'transform 0.3s ease';
                checkCompletion();
                
                const currentPiece = pieces.find(p => p.element === element);
                if (currentPiece) {
                    const rect = element.getBoundingClientRect();
                    const containerRect = document.getElementById('puzzle-container').getBoundingClientRect();
                    
                    const actualX = rect.left - containerRect.left;
                    const actualY = rect.top - containerRect.top;
                    
                    const dx = Math.abs(actualX - currentPiece.correctX);
                    const dy = Math.abs(actualY - currentPiece.correctY);
                    
                    const threshold = element.offsetWidth * 0.2;
                    
                    if (dx < threshold && dy < threshold) {
                        element.style.left = `${currentPiece.correctX}px`;
                        element.style.top = `${currentPiece.correctY}px`;
                        element.style.transform = 'translate(0, 0)';
                        checkCompletion();
                    }
                }
            }
            
            function mouseUp() {
                endDrag();
                document.removeEventListener('mousemove', mouseMove);
                document.removeEventListener('mouseup', mouseUp);
            }
            
            function touchEnd() {
                endDrag();
            }
            
            function endDrag() {
                if (!isDragging) return;
                isDragging = false;
                element.style.transition = 'transform 0.3s ease';
                checkCompletion(); // 每次拖动结束都强制检查完成状态
                
                // 自动吸附逻辑
                const currentPiece = pieces.find(p => p.element === element);
                if (currentPiece) {
                    // 获取元素实际位置并与正确位置对比
                    const rect = element.getBoundingClientRect();
                    const containerRect = document.getElementById('puzzle-container').getBoundingClientRect();
                    
                    const actualX = rect.left - containerRect.left;
                    const actualY = rect.top - containerRect.top;
                    
                    const dx = Math.abs(actualX - currentPiece.correctX);
                    const dy = Math.abs(actualY - currentPiece.correctY);
                    
                    // 调整吸附阈值为元素尺寸的20%
                    const threshold = element.offsetWidth * 0.2;
                    
                    if (dx < threshold && dy < threshold) {
                        // 直接设置正确位置
                        element.style.left = `${currentPiece.correctX}px`;
                        element.style.top = `${currentPiece.correctY}px`;
                        element.style.transform = 'translate(0, 0)';
                        checkCompletion(); // 自动吸附后再次检查
                    }
                }
            }
        }
        
        function checkCompletion() {
            const threshold = 10; // 增加阈值确保即时触发
            let correctCount = 0;
            
            // 使用requestAnimationFrame确保在渲染后检查
            requestAnimationFrame(() => {
                pieces.forEach(piece => {
                    const rect = piece.element.getBoundingClientRect();
                    const containerRect = document.getElementById('puzzle-container').getBoundingClientRect();
                    
                    const actualX = rect.left - containerRect.left;
                    const actualY = rect.top - containerRect.top;
                    
                    // 增加5px容差范围
                    if (Math.abs(actualX - piece.correctX) <= threshold && 
                        Math.abs(actualY - piece.correctY) <= threshold) {
                        correctCount++;
                    }
                });
                
                if (correctCount === PIECES) {
                    // 使用微任务确保同步执行
                    Promise.resolve().then(() => {
                        const overlay = document.getElementById('completion-overlay');
                        overlay.style.display = 'flex';
                        const container = document.getElementById('puzzle-container');
                        container.style.background = 'none';
                        generateGameQRCode();
                        document.getElementById('qrcode-container').style.opacity = '1';
                    });
                }
            });
        }
        // 预生成游戏数据URL（提升性能）
        let cachedGameDataURL = null;
        const QR_VERSION = '1.0'; // 缓存版本号
        
        // 初始化时异步预生成数据URL
        (function pregenerateGameData() {
            const tempImg = new Image();
            tempImg.src = 'picture.jpg';
            
            // 使用缩略图（200x200）提升性能
            const thumbCanvas = document.createElement('canvas');
            thumbCanvas.width = 200;
            thumbCanvas.height = 200;
            
            tempImg.onload = () => {
                const ctx = thumbCanvas.getContext('2d');
                ctx.drawImage(tempImg, 0, 0, 200, 200);
                const thumbDataURL = thumbCanvas.toDataURL('image/jpeg', 0.8);
                
                // 预先生成游戏HTML模板
                const escapedStyle = document.querySelector('style').innerHTML
                    .replace(/\\/g, '\\\\')
                    .replace(/`/g, '\\`');
                    
                const escapedScript = document.querySelector('script').innerHTML
                    .replace(/<\/script>/gi, '<\\/script>')
                    .replace(/\\/g, '\\\\')
                    .replace(/`/g, '\\`');
                
                const gameHTML = `<!DOCTYPE html>
<html>
<head>
    <title>拼图游戏</title>
    <style>${escapedStyle}</style>
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"><\/script>
</head>
<body style="margin:0">
    <img id="original-image" src="${thumbDataURL}" style="display:none">
    <div id="puzzle-container"></div>
    <script>${escapedScript}<\/script>
</body>
</html>`;

                // 使用安全Base64编码并添加错误处理
                try {
                    const encoder = new TextEncoder();
                    const data = encoder.encode(gameHTML);
                    const encodedHTML = btoa(String.fromCharCode(...new Uint8Array(data)));
                    cachedGameDataURL = `data:text/html;charset=utf-8;base64,${encodedHTML}?v=${QR_VERSION}`;
                } catch (error) {
                    console.error('编码失败:', error);
                    cachedGameDataURL = null;
                }
            };
        })();

        // 二维码生成队列（防止重复生成）
        let isGeneratingQR = false;
        
        function generateGameQRCode() {
            if (!cachedGameDataURL) {
                console.log('数据正在预加载，请稍候...');
                return;
            }
            
            if (isGeneratingQR) return;
            isGeneratingQR = true;
            
            const qrcodeDiv = document.getElementById('qrcode-container');
            qrcodeDiv.innerHTML = '<div style="color:black; padding:10px;">生成中...</div>';
            
            // 使用预先生成的数据URL
            requestAnimationFrame(() => {
                try {
                    qrcodeDiv.innerHTML = '';
                    new QRCode(qrcodeDiv, {
                        text: cachedGameDataURL,
                        width: 200,
                        height: 200,
                        colorDark: "#000000",
                        colorLight: "#ffffff",
                        correctLevel: QRCode.CorrectLevel.H,
                        // useSVG: true // 移除不兼容的SVG选项
                    });
                    
                    // 添加淡入动画
                    qrcodeDiv.style.opacity = 0;
                    requestAnimationFrame(() => {
                        qrcodeDiv.style.transition = 'opacity 0.3s';
                        qrcodeDiv.style.opacity = 1;
                    });
                } catch (error) {
                    console.error('二维码生成失败:', error);
                    qrcodeDiv.innerHTML = '生成失败，请重试';
                } finally {
                    isGeneratingQR = false;
                }
            });
        }
</script>
</body>
</html>
